"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkbattleship"] = self["webpackChunkbattleship"] || []).push([["main"],{

/***/ "./src/DOM.js":
/*!********************!*\
  !*** ./src/DOM.js ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DOM\": () => (/* binding */ DOM)\n/* harmony export */ });\n/* harmony import */ var _players__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./players */ \"./src/players.js\");\n\r\n\r\nconst DOM = (() => {\r\n  const humanBoardContainer = document.getElementById('human-gameboard');\r\n  const cpuBoardContainer = document.getElementById('cpu-gameboard');\r\n  const changeAxis = document.querySelector('#change-axis');\r\n\r\n  document.addEventListener('DOMContentLoaded', function () {\r\n    xAxisSelected = true;\r\n    changeAxis.addEventListener('click', () => {\r\n      xAxisSelected = xAxisSelected === true ? false : true;\r\n      changeAxis.textContent =\r\n        changeAxis.textContent === 'X axis' ? 'Y axis' : 'X axis';\r\n    });\r\n  });\r\n\r\n  let xAxisSelected = true;\r\n\r\n  const getAxis = () => {\r\n    return xAxisSelected;\r\n  };\r\n\r\n  const setAxis = (rand) => {\r\n    xAxisSelected = rand ? true : false;\r\n  };\r\n\r\n  let shipsPlaced = false;\r\n\r\n  const onload = (humanGameboard, cpuGameboard, human, computer) => {\r\n    renderGameboard(humanGameboard, true);\r\n    renderGameboard(cpuGameboard, false);\r\n    updateInstructions(humanGameboard.getShipType());\r\n  };\r\n\r\n  const updateCell = (target, coords, gameboard) => {\r\n    const [x, y] = coords;\r\n    target.textContent = gameboard.gameboard[y][x];\r\n  };\r\n\r\n  const editHumanCell = (cell, square) => {\r\n    if (typeof square === 'object') {\r\n      cell.textContent = 'ship';\r\n    } else if (square === 'hit') {\r\n      cell.textContent = 'X';\r\n    }\r\n    cell.classList.add('human-cell');\r\n    return cell;\r\n  };\r\n\r\n  const editCpuCell = (cell, square, x, y) => {\r\n    if (square === 'hit') {\r\n      cell.textContent = 'X';\r\n    }\r\n    cell.classList.add('clickable-cell');\r\n    return cell;\r\n  };\r\n\r\n  const renderGameboard = (gameboard, isHuman) => {\r\n    let x = 0;\r\n    let y = 0;\r\n    gameboard.gameboard.forEach((row) => {\r\n      row.forEach((square) => {\r\n        let cell = document.createElement('div');\r\n        cell.classList.add('cell');\r\n        cell.dataset.x = x;\r\n        cell.dataset.y = y;\r\n        if (isHuman) {\r\n          cell = editHumanCell(cell, square);\r\n          humanBoardContainer.appendChild(cell);\r\n        } else {\r\n          cell = editCpuCell(cell, square, x, y);\r\n          cpuBoardContainer.appendChild(cell);\r\n        }\r\n        x++;\r\n      });\r\n      x = 0;\r\n      y++;\r\n    });\r\n  };\r\n\r\n  const coordsToColor = (coords, length) => {\r\n    let [x, y] = coords;\r\n    const arr = [];\r\n    for (let i = 0; i < length; i++) {\r\n      arr.push([x, y]);\r\n      xAxisSelected ? x++ : y++;\r\n    }\r\n    return arr;\r\n  };\r\n\r\n  const convertCoordsToNums = (coords) => {\r\n    return coords.map((arr) => {\r\n      const [x, y] = arr;\r\n      return +y * 10 + +x;\r\n    });\r\n  };\r\n\r\n  const convertCoordsToCells = (coords, length) => {\r\n    let coordsToColorArray = coordsToColor(coords, length);\r\n    return convertCoordsToNums(coordsToColorArray);\r\n  };\r\n\r\n  const shipOverlap = (cellsToColor, cellsArray) => {\r\n    return cellsToColor.some((cell) => {\r\n      return cellsArray[cell].classList.contains('ship-cell');\r\n    });\r\n  };\r\n\r\n  const isValidShipHover = (cellsToColor, coords, cellsArray) => {\r\n    const length = cellsToColor.length;\r\n    const startingSquare = xAxisSelected ? coords[0] : coords[1];\r\n    if (+startingSquare + +length <= 10) {\r\n      if (!shipOverlap(cellsToColor, cellsArray)) {\r\n        return true;\r\n      }\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const colorCells = (cellsToColor, cellsArray, color) => {\r\n    cellsToColor.forEach((cell) => {\r\n      cellsArray[cell].style.backgroundColor = color;\r\n    });\r\n  };\r\n\r\n  const addClass = (cellsToAddTo, cellsArray, cssClass) => {\r\n    cellsToAddTo.forEach((cell) => {\r\n      cellsArray[cell].classList.add(cssClass);\r\n    });\r\n  };\r\n\r\n  const getCoords = (e) => {\r\n    let x = e.target.dataset.x;\r\n    let y = e.target.dataset.y;\r\n    return [x, y];\r\n  };\r\n\r\n  const placeShip = (cells) => {\r\n    cells.forEach((cell) => {\r\n      cell.style.backgroundColor = 'red';\r\n    });\r\n  };\r\n\r\n  const removeColor = (cells) =>\r\n    cells.forEach((cell) => (cell.style.backgroundColor = '#1e3a8a'));\r\n\r\n  const updateInstructions = (shipType) => {\r\n    const shipText = document.getElementById('ship-type');\r\n    shipText.textContent = shipType;\r\n  };\r\n\r\n  const updateNarration = (narration, attackResult, otherPlayer) => {\r\n    const text = document.getElementById(narration);\r\n    const result = document.getElementById('result-of-attack');\r\n    const otherPlayerText = document.getElementById(otherPlayer);\r\n    otherPlayerText.style.visibility = 'hidden';\r\n    if (narration === 'human-narration') {\r\n      text.textContent = 'You fire a shot into enemy waters... ';\r\n      text.style.visibility = 'visible';\r\n    } else if (narration === 'cpu-narration') {\r\n      text.textContent = 'The enemy fires a shot into your waters...';\r\n      text.style.visibility = 'visible';\r\n    }\r\n    setTimeout(() => {\r\n      result.style.visibility = 'visible';\r\n      result.textContent = attackResult;\r\n    }, 1000);\r\n    result.style.visibility = 'hidden';\r\n  };\r\n\r\n  const editText = (idToEdit, newText) => {\r\n    const toEdit = document.getElementById(idToEdit);\r\n    toEdit.textContent = newText;\r\n  };\r\n\r\n  const hideElement = (idToHide) => {\r\n    const toHide = document.getElementById(idToHide);\r\n    toHide.style.visibility = 'hidden';\r\n  };\r\n\r\n  return {\r\n    renderGameboard,\r\n    onload,\r\n    getCoords,\r\n    updateCell,\r\n    convertCoordsToCells,\r\n    coordsToColor,\r\n    removeColor,\r\n    colorCells,\r\n    isValidShipHover,\r\n    shipsPlaced,\r\n    placeShip,\r\n    addClass,\r\n    getAxis,\r\n    setAxis,\r\n    updateInstructions,\r\n    updateNarration,\r\n    editText,\r\n    hideElement,\r\n  };\r\n})();\r\n\r\n\r\n\n\n//# sourceURL=webpack://battleship/./src/DOM.js?");

/***/ }),

/***/ "./src/gameboardFactory.js":
/*!*********************************!*\
  !*** ./src/gameboardFactory.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"gameboardFactory\": () => (/* binding */ gameboardFactory)\n/* harmony export */ });\n/* harmony import */ var _shipFactory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shipFactory */ \"./src/shipFactory.js\");\n/* harmony import */ var _DOM__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DOM */ \"./src/DOM.js\");\n/* harmony import */ var _players__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./players */ \"./src/players.js\");\n\r\n\r\n\r\n\r\nconst gameboardFactory = () => {\r\n  const gameboard = [\r\n    ['', '', '', '', '', '', '', '', '', ''],\r\n    ['', '', '', '', '', '', '', '', '', ''],\r\n    ['', '', '', '', '', '', '', '', '', ''],\r\n    ['', '', '', '', '', '', '', '', '', ''],\r\n    ['', '', '', '', '', '', '', '', '', ''],\r\n    ['', '', '', '', '', '', '', '', '', ''],\r\n    ['', '', '', '', '', '', '', '', '', ''],\r\n    ['', '', '', '', '', '', '', '', '', ''],\r\n    ['', '', '', '', '', '', '', '', '', ''],\r\n    ['', '', '', '', '', '', '', '', '', ''],\r\n  ];\r\n\r\n  let shipCounter = 0;\r\n\r\n  const ships = [];\r\n\r\n  const shipTypes = [\r\n    'Destroyer',\r\n    'Submarine',\r\n    'Cruiser',\r\n    'Battleship',\r\n    'Carrier',\r\n  ];\r\n\r\n  const shipsToPlace = [2, 3, 3, 4, 5];\r\n\r\n  const missedAttacks = [];\r\n\r\n  const shipLocations = {};\r\n\r\n  const getShipType = () => {\r\n    return shipTypes.pop();\r\n  };\r\n\r\n  const getShipLength = () => {\r\n    return shipsToPlace[shipsToPlace.length - 1];\r\n  };\r\n\r\n  const removeShip = () => {\r\n    shipsToPlace.pop();\r\n  };\r\n\r\n  const allShipsPlaced = () => {\r\n    return shipsToPlace.length === 0 ? true : false;\r\n  };\r\n\r\n  const allShipsSunk = () => {\r\n    return ships.every((ship) => {\r\n      return ship.isSunk();\r\n    });\r\n  };\r\n\r\n  const isArrayInArray = (arr, item) => {\r\n    const itemAsString = JSON.stringify(item);\r\n\r\n    const contains = arr.some((element) => {\r\n      return JSON.stringify(element) === itemAsString;\r\n    });\r\n    return contains;\r\n  };\r\n\r\n  const saveLocation = (shipId, shipLength, coordinatesArray) => {\r\n    const [x, y] = coordinatesArray;\r\n    shipLocations[shipId] = { xStart: x, xEnd: x + (shipLength - 1) };\r\n  };\r\n\r\n  const placeShip = (shipLength, coordinatesArray) => {\r\n    let [x, y] = coordinatesArray;\r\n    const ship = (0,_shipFactory__WEBPACK_IMPORTED_MODULE_0__.shipFactory)(shipLength, shipCounter);\r\n    shipCounter++;\r\n    for (let i = 0; i < shipLength; i++) {\r\n      gameboard[y][x] = ship;\r\n      _DOM__WEBPACK_IMPORTED_MODULE_1__.DOM.getAxis() ? x++ : y++;\r\n    }\r\n    saveLocation(ship.id, shipLength, coordinatesArray);\r\n    ships.push(ship);\r\n  };\r\n\r\n  const placeCpuShips = (cpuCells) => {\r\n    const x = Math.floor(Math.random() * 10);\r\n    const y = Math.floor(Math.random() * 10);\r\n    const currentShipLength = shipsToPlace[shipsToPlace.length - 1];\r\n    const rand = Math.random() < 0.5;\r\n    rand < 0.5 ? _DOM__WEBPACK_IMPORTED_MODULE_1__.DOM.setAxis(true) : _DOM__WEBPACK_IMPORTED_MODULE_1__.DOM.setAxis(false);\r\n    let cellsToColor = _DOM__WEBPACK_IMPORTED_MODULE_1__.DOM.convertCoordsToCells([x, y], currentShipLength);\r\n    if (_DOM__WEBPACK_IMPORTED_MODULE_1__.DOM.isValidShipHover(cellsToColor, [x, y], cpuCells)) {\r\n      placeShip(currentShipLength, [x, y]);\r\n      shipsToPlace.pop();\r\n    } else {\r\n      placeCpuShips(cpuCells);\r\n    }\r\n  };\r\n\r\n  const recieveAttack = (coordinatesArray) => {\r\n    const [x, y] = coordinatesArray;\r\n    let result;\r\n    let target = gameboard[y][x];\r\n    const id = target.id;\r\n    if (typeof target === 'object') {\r\n      target.hit(x - shipLocations[id].xStart);\r\n      gameboard[y][x] = 'hit a ship!';\r\n      if (target.isSunk()) {\r\n        result = 'SHIP SUNK!';\r\n      } else {\r\n        result = 'SHIP HIT!';\r\n      }\r\n    } else if (target === 'hit a ship') {\r\n      gameboard[y][x] = 'hit a ship';\r\n      result = 'already hit a ship';\r\n    } else {\r\n      gameboard[y][x] = 'X';\r\n      result = 'MISS!';\r\n    }\r\n    missedAttacks.push([x, y]);\r\n    return result;\r\n  };\r\n\r\n  return {\r\n    gameboard,\r\n    placeShip,\r\n    recieveAttack,\r\n    missedAttacks,\r\n    allShipsSunk,\r\n    getShipLength,\r\n    removeShip,\r\n    allShipsPlaced,\r\n    ships,\r\n    shipCounter,\r\n    placeCpuShips,\r\n    getShipType,\r\n    missedAttacks,\r\n    isArrayInArray,\r\n  };\r\n};\r\n\r\n\r\n\n\n//# sourceURL=webpack://battleship/./src/gameboardFactory.js?");

/***/ }),

/***/ "./src/gameloop.js":
/*!*************************!*\
  !*** ./src/gameloop.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _gameboardFactory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gameboardFactory */ \"./src/gameboardFactory.js\");\n/* harmony import */ var _players__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./players */ \"./src/players.js\");\n/* harmony import */ var _DOM__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./DOM */ \"./src/DOM.js\");\n\r\n\r\n\r\n\r\nconst gameloop = () => {\r\n  const human = (0,_players__WEBPACK_IMPORTED_MODULE_1__.humanPlayer)();\r\n  const computer = (0,_players__WEBPACK_IMPORTED_MODULE_1__.cpuPlayer)();\r\n\r\n  const shipIconsX = [\r\n    './destroyer.png',\r\n    './submarine.png',\r\n    './cruiser.png',\r\n    './battleship.png',\r\n    './warship.png',\r\n  ];\r\n\r\n  const shipIconsY = [\r\n    './destroyer-y.png',\r\n    './submarine-y.png',\r\n    './cruiser-y.png',\r\n    './battleship-y.png',\r\n    './warship-y.png',\r\n  ];\r\n\r\n  const humanGameboard = (0,_gameboardFactory__WEBPACK_IMPORTED_MODULE_0__.gameboardFactory)();\r\n  const cpuGameboard = (0,_gameboardFactory__WEBPACK_IMPORTED_MODULE_0__.gameboardFactory)();\r\n\r\n  _DOM__WEBPACK_IMPORTED_MODULE_2__.DOM.onload(humanGameboard, cpuGameboard, human, computer);\r\n\r\n  const cpuCells = document.querySelectorAll('.clickable-cell');\r\n  const humanCells = Array.from(document.querySelectorAll('.human-cell'));\r\n\r\n  humanCells.forEach((cell) => {\r\n    cell.addEventListener('mouseenter', (e) => {\r\n      const [x, y] = _DOM__WEBPACK_IMPORTED_MODULE_2__.DOM.getCoords(e);\r\n      let startingCell = _DOM__WEBPACK_IMPORTED_MODULE_2__.DOM.convertCoordsToCells([x, y], 1);\r\n      let cellsToColor = _DOM__WEBPACK_IMPORTED_MODULE_2__.DOM.convertCoordsToCells(\r\n        [x, y],\r\n        humanGameboard.getShipLength()\r\n      );\r\n      if (_DOM__WEBPACK_IMPORTED_MODULE_2__.DOM.isValidShipHover(cellsToColor, [x, y], humanCells)) {\r\n        humanCells.forEach((cell) => cell.classList.remove('invalid-hover'));\r\n        humanCells.forEach((cell) => cell.classList.add('valid-hover'));\r\n        const img = document.createElement('img');\r\n        const axis = _DOM__WEBPACK_IMPORTED_MODULE_2__.DOM.getAxis();\r\n        if (axis) {\r\n          img.src = shipIconsX[shipIconsX.length - 1];\r\n          img.id = shipIconsX[shipIconsX.length - 1];\r\n        } else {\r\n          img.src = shipIconsY[shipIconsY.length - 1];\r\n          img.id = shipIconsY[shipIconsY.length - 1];\r\n        }\r\n        humanCells[startingCell].appendChild(img);\r\n        humanCells[startingCell].style.backgroundColor = '#2563eb';\r\n        for (let i = 1; i < cellsToColor.length; i++) {\r\n          humanCells[cellsToColor[i]].style.backgroundColor = 'transparent';\r\n        }\r\n      } else {\r\n        humanCells.forEach((cell) => cell.classList.remove('valid-hover'));\r\n        humanCells.forEach((cell) => cell.classList.add('invalid-hover'));\r\n      }\r\n    });\r\n\r\n    cell.addEventListener('mouseleave', (e) => {\r\n      if (cell.classList.contains('no-remove')) {\r\n        return;\r\n      } else {\r\n        cell.innerHTML = '';\r\n        cell.style.backgroundColor = '#0284c7';\r\n        humanCells.forEach((cell) => {\r\n          if (!cell.classList.contains('no-remove')) {\r\n            cell.style.backgroundColor = '#334155';\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    cell.addEventListener('click', (e) => {\r\n      const axis = _DOM__WEBPACK_IMPORTED_MODULE_2__.DOM.getAxis();\r\n      const x = e.currentTarget.dataset.x;\r\n      const y = e.currentTarget.dataset.y;\r\n      const coords = [x, y];\r\n      let cellsToColor = _DOM__WEBPACK_IMPORTED_MODULE_2__.DOM.convertCoordsToCells(\r\n        coords,\r\n        humanGameboard.getShipLength()\r\n      );\r\n      let startingCell = _DOM__WEBPACK_IMPORTED_MODULE_2__.DOM.convertCoordsToCells([x, y], 1);\r\n      if (\r\n        !humanGameboard.allShipsPlaced() &&\r\n        _DOM__WEBPACK_IMPORTED_MODULE_2__.DOM.isValidShipHover(cellsToColor, coords, humanCells)\r\n      ) {\r\n        const currentShipLength = humanGameboard.getShipLength();\r\n        let cellsToColor = _DOM__WEBPACK_IMPORTED_MODULE_2__.DOM.convertCoordsToCells(coords, currentShipLength);\r\n        _DOM__WEBPACK_IMPORTED_MODULE_2__.DOM.addClass(cellsToColor, humanCells, 'ship-cell');\r\n        if (axis) {\r\n          const img = document.getElementById(\r\n            shipIconsX[shipIconsX.length - 1]\r\n          );\r\n          img.src = shipIconsX[shipIconsX.length - 1];\r\n        } else {\r\n          const img = document.getElementById(\r\n            shipIconsY[shipIconsY.length - 1]\r\n          );\r\n          img.src = shipIconsY[shipIconsY.length - 1];\r\n        }\r\n        for (let i = 1; i < cellsToColor.length; i++) {\r\n          humanCells[cellsToColor[i]].style.backgroundColor = 'transparent';\r\n          humanCells[cellsToColor[i]].classList.add('no-remove');\r\n        }\r\n        humanCells[startingCell].classList.add('no-remove');\r\n        humanGameboard.placeShip(currentShipLength, coords);\r\n        humanGameboard.removeShip();\r\n        shipIconsX.pop();\r\n        shipIconsY.pop();\r\n        let shipType = humanGameboard.getShipType();\r\n        _DOM__WEBPACK_IMPORTED_MODULE_2__.DOM.editText('instruction', `Please place your ${shipType}...`);\r\n      }\r\n      if (humanGameboard.allShipsPlaced()) {\r\n        _DOM__WEBPACK_IMPORTED_MODULE_2__.DOM.editText(\r\n          'instruction',\r\n          'All ships placed - game on! Take your shot...'\r\n        );\r\n        _DOM__WEBPACK_IMPORTED_MODULE_2__.DOM.hideElement('change-axis');\r\n        humanCells.forEach((cell) => (cell.style.pointerEvents = 'none'));\r\n        cpuCells.forEach((cell) => (cell.style.pointerEvents = 'auto'));\r\n      }\r\n    });\r\n  });\r\n\r\n  cpuCells.forEach((cell) => {\r\n    cell.style.pointerEvents = 'none';\r\n    cell.addEventListener('click', (e) => {\r\n      if (humanGameboard.allShipsPlaced()) {\r\n        cpuCells.forEach((cell) => (cell.style.pointerEvents = 'none'));\r\n        _DOM__WEBPACK_IMPORTED_MODULE_2__.DOM.hideElement('instruction');\r\n        const coords = _DOM__WEBPACK_IMPORTED_MODULE_2__.DOM.getCoords(e);\r\n        let attackResult = human.makeMove(cpuGameboard, coords);\r\n        setTimeout(() => {\r\n          // DOM.updateCell(e.target, coords, cpuGameboard);\r\n          if (attackResult === 'SHIP HIT!') {\r\n            e.target.classList.add('hit');\r\n          } else if (attackResult === 'MISS!') {\r\n            e.target.classList.add('miss');\r\n          } else if (attackResult === 'SHIP SUNK!') {\r\n            console.log('ship sunk');\r\n            e.target.classList.add('hit');\r\n          }\r\n        }, 1000);\r\n        _DOM__WEBPACK_IMPORTED_MODULE_2__.DOM.updateNarration('human-narration', attackResult, 'cpu-narration');\r\n        setTimeout(() => {\r\n          const arr = computer.makeMove(humanGameboard, computer, cpuGameboard);\r\n          const [x, y] = arr[0];\r\n          attackResult = arr[1];\r\n          const target = humanCells.find(\r\n            (cell) =>\r\n              cell.dataset.x === String(x) && cell.dataset.y === String(y)\r\n          );\r\n          _DOM__WEBPACK_IMPORTED_MODULE_2__.DOM.updateNarration('cpu-narration', attackResult, 'human-narration');\r\n          setTimeout(() => {\r\n            console.log(attackResult);\r\n            // DOM.updateCell(target, [x, y], humanGameboard);\r\n            if (attackResult === 'SHIP HIT!') {\r\n              target.classList.add('hit');\r\n              // target.firstChild.classList.add('hit');\r\n            } else if (attackResult === 'MISS!') {\r\n              target.classList.add('miss');\r\n            } else if (attackResult === 'SHIP SUNK!') {\r\n              console.log('ship sunk');\r\n              target.classList.add('hit');\r\n            }\r\n          }, 1000);\r\n          setTimeout(() => {\r\n            _DOM__WEBPACK_IMPORTED_MODULE_2__.DOM.editText('cpu-narration', 'take your shot...');\r\n            _DOM__WEBPACK_IMPORTED_MODULE_2__.DOM.hideElement('result-of-attack');\r\n            cpuCells.forEach((cell) => {\r\n              if (\r\n                !(\r\n                  cell.classList.contains('hit') ||\r\n                  cell.classList.contains('miss')\r\n                )\r\n              ) {\r\n                cell.style.pointerEvents = 'auto';\r\n              }\r\n            });\r\n          }, 3000);\r\n        }, '2500');\r\n        if (cpuGameboard.allShipsSunk() || humanGameboard.allShipsSunk()) {\r\n          setTimeout(() => {\r\n            _DOM__WEBPACK_IMPORTED_MODULE_2__.DOM.editText('human-narration', 'GAME OVER! ALL SHIPS SUNK!');\r\n            _DOM__WEBPACK_IMPORTED_MODULE_2__.DOM.editText('cpu-narration', '');\r\n            _DOM__WEBPACK_IMPORTED_MODULE_2__.DOM.editText('human-narration', '');\r\n            _DOM__WEBPACK_IMPORTED_MODULE_2__.DOM.editText('instruction', 'Game over! All ships sunk!');\r\n            cpuCells.forEach((cell) => (cell.style.pointerEvents = 'none'));\r\n            humanCells.forEach((cell) => (cell.style.pointerEvents = 'none'));\r\n          }, '2501');\r\n          return;\r\n        }\r\n      } else {\r\n        return;\r\n      }\r\n    });\r\n  });\r\n\r\n  for (let i = 0; i < 5; i++) {\r\n    cpuGameboard.placeCpuShips(cpuCells);\r\n  }\r\n};\r\n\r\ngameloop();\r\n\n\n//# sourceURL=webpack://battleship/./src/gameloop.js?");

/***/ }),

/***/ "./src/players.js":
/*!************************!*\
  !*** ./src/players.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cpuPlayer\": () => (/* binding */ cpuPlayer),\n/* harmony export */   \"humanPlayer\": () => (/* binding */ humanPlayer)\n/* harmony export */ });\nconst humanPlayer = () => {\r\n  const makeMove = (enemyGameboard, coordinatesArray) => {\r\n    return enemyGameboard.recieveAttack(coordinatesArray, enemyGameboard);\r\n  };\r\n\r\n  return { makeMove };\r\n};\r\n\r\nconst cpuPlayer = () => {\r\n  const makeMove = (enemyGameboard, cpuPlayer, cpuGameboard) => {\r\n    const x = Math.floor(Math.random() * 10);\r\n    const y = Math.floor(Math.random() * 10);\r\n    if (enemyGameboard.isArrayInArray(enemyGameboard.missedAttacks, [x, y])) {\r\n      return cpuPlayer.makeMove(enemyGameboard, cpuPlayer, cpuGameboard);\r\n    }\r\n    const result = enemyGameboard.recieveAttack(\r\n      [x, y],\r\n      cpuPlayer,\r\n      cpuGameboard,\r\n      enemyGameboard\r\n    );\r\n    return [[x, y], result];\r\n  };\r\n  return { makeMove };\r\n};\r\n\r\n\r\n\n\n//# sourceURL=webpack://battleship/./src/players.js?");

/***/ }),

/***/ "./src/shipFactory.js":
/*!****************************!*\
  !*** ./src/shipFactory.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"shipFactory\": () => (/* binding */ shipFactory)\n/* harmony export */ });\nconst shipFactory = (length, id) => {\r\n  const hitArray = [];\r\n  const hit = (num) => {\r\n    hitArray.push(num);\r\n  };\r\n  const isSunk = () => hitArray.length === length;\r\n  return { length, hitArray, hit, isSunk, id };\r\n};\r\n\r\n\r\n\n\n//# sourceURL=webpack://battleship/./src/shipFactory.js?");

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ var __webpack_exports__ = (__webpack_exec__("./src/gameloop.js"));
/******/ }
]);